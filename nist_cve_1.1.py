from __future__ import print_function
from os import listdir
from os.path import isfile, join
import json
import sqlite3
import zipfile
from timeit import default_timer as timer

# The databasae contains the labels true and false which needs a numeric value.
true=True
false=False

issue_0768_dict =  {
    "cve" : {
      "data_type" : "CVE",
      "data_format" : "MITRE",
      "data_version" : "4.0",
      "CVE_data_meta" : {
        "ID" : "CVE-2016-0768",
        "ASSIGNER" : "cve@mitre.org"
      },
      "problemtype" : {
        "problemtype_data" : [ {
          "description" : [ {
            "lang" : "en",
            "value" : "CWE-284"
          } ]
        } ]
      },
      "references" : {
        "reference_data" : [ {
          "url" : "https://tada.github.io/pljava/releasenotes.html",
          "name" : "https://tada.github.io/pljava/releasenotes.html",
          "refsource" : "CONFIRM",
          "tags" : [ "Release Notes", "Third Party Advisory" ]
        } ]
      },
      "description" : {
        "description_data" : [ {
          "lang" : "en",
          "value" : "PostgreSQL PL/Java after 9.0 does not honor access controls on large objects."
        } ]
      }
    },
    "configurations" : {
      "CVE_data_version" : "4.0",
      "nodes" : [ {
        "operator" : "OR",
        "cpe_match" : [ {
          "vulnerable" : true,
          "cpe23Uri" : "cpe:2.3:a:postgresql:postgresql:*:*:*:*:*:*:*:*",
          "versionEndIncluding" : "9.0"
        } ]
      } ]
    },
    "impact" : {
      "baseMetricV3" : {
        "cvssV3" : {
          "version" : "3.0",
          "vectorString" : "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "attackVector" : "NETWORK",
          "attackComplexity" : "LOW",
          "privilegesRequired" : "NONE",
          "userInteraction" : "NONE",
          "scope" : "UNCHANGED",
          "confidentialityImpact" : "HIGH",
          "integrityImpact" : "NONE",
          "availabilityImpact" : "NONE",
          "baseScore" : 7.5,
          "baseSeverity" : "HIGH"
        },
        "exploitabilityScore" : 3.9,
        "impactScore" : 3.6
      },
      "baseMetricV2" : {
        "cvssV2" : {
          "version" : "2.0",
          "vectorString" : "AV:N/AC:L/Au:N/C:P/I:N/A:N",
          "accessVector" : "NETWORK",
          "accessComplexity" : "LOW",
          "authentication" : "NONE",
          "confidentialityImpact" : "PARTIAL",
          "integrityImpact" : "NONE",
          "availabilityImpact" : "NONE",
          "baseScore" : 5.0
        },
        "severity" : "MEDIUM",
        "exploitabilityScore" : 10.0,
        "impactScore" : 2.9,
        "acInsufInfo" : true,
        "obtainAllPrivilege" : false,
        "obtainUserPrivilege" : false,
        "obtainOtherPrivilege" : false,
        "userInteractionRequired" : false
      }
    },
    "publishedDate" : "2017-06-06T18:29Z",
    "lastModifiedDate" : "2017-06-13T18:17Z"
}

issue_1389_dict = {
    "cve" : {
      "data_type" : "CVE",
      "data_format" : "MITRE",
      "data_version" : "4.0",
      "CVE_data_meta" : {
        "ID" : "CVE-2016-3189",
        "ASSIGNER" : "cve@mitre.org"
      },
      "problemtype" : {
        "problemtype_data" : [ {
          "description" : [ {
            "lang" : "en",
            "value" : "NVD-CWE-Other"
          } ]
        } ]
      },
      "references" : {
        "reference_data" : [ {
          "url" : "http://packetstormsecurity.com/files/153644/Slackware-Security-Advisory-bzip2-Updates.html",
          "name" : "http://packetstormsecurity.com/files/153644/Slackware-Security-Advisory-bzip2-Updates.html",
          "refsource" : "MISC",
          "tags" : [ ]
        }, {
          "url" : "http://packetstormsecurity.com/files/153957/FreeBSD-Security-Advisory-FreeBSD-SA-19-18.bzip2.html",
          "name" : "http://packetstormsecurity.com/files/153957/FreeBSD-Security-Advisory-FreeBSD-SA-19-18.bzip2.html",
          "refsource" : "MISC",
          "tags" : [ ]
        }, {
          "url" : "http://www.openwall.com/lists/oss-security/2016/06/20/1",
          "name" : "[oss-security] 20160620 CVE-2016-3189: bzip2 use-after-free on bzip2recover",
          "refsource" : "MLIST",
          "tags" : [ ]
        }, {
          "url" : "http://www.oracle.com/technetwork/topics/security/bulletinjul2016-3090568.html",
          "name" : "http://www.oracle.com/technetwork/topics/security/bulletinjul2016-3090568.html",
          "refsource" : "CONFIRM",
          "tags" : [ ]
        }, {
          "url" : "http://www.securityfocus.com/bid/91297",
          "name" : "91297",
          "refsource" : "BID",
          "tags" : [ ]
        }, {
          "url" : "http://www.securitytracker.com/id/1036132",
          "name" : "1036132",
          "refsource" : "SECTRACK",
          "tags" : [ ]
        }, {
          "url" : "https://bugzilla.redhat.com/show_bug.cgi?id=1319648",
          "name" : "https://bugzilla.redhat.com/show_bug.cgi?id=1319648",
          "refsource" : "CONFIRM",
          "tags" : [ ]
        }, {
          "url" : "https://lists.debian.org/debian-lts-announce/2019/06/msg00021.html",
          "name" : "[debian-lts-announce] 20190624 [SECURITY] [DLA 1833-1] bzip2 security update",
          "refsource" : "MLIST",
          "tags" : [ ]
        }, {
          "url" : "https://seclists.org/bugtraq/2019/Aug/4",
          "name" : "20190806 FreeBSD Security Advisory FreeBSD-SA-19:18.bzip2",
          "refsource" : "BUGTRAQ",
          "tags" : [ ]
        }, {
          "url" : "https://seclists.org/bugtraq/2019/Jul/22",
          "name" : "20190715 [slackware-security] bzip2 (SSA:2019-195-01)",
          "refsource" : "BUGTRAQ",
          "tags" : [ ]
        }, {
          "url" : "https://security.FreeBSD.org/advisories/FreeBSD-SA-19:18.bzip2.asc",
          "name" : "FreeBSD-SA-19:18",
          "refsource" : "FREEBSD",
          "tags" : [ ]
        }, {
          "url" : "https://security.gentoo.org/glsa/201708-08",
          "name" : "GLSA-201708-08",
          "refsource" : "GENTOO",
          "tags" : [ ]
        }, {
          "url" : "https://usn.ubuntu.com/4038-1/",
          "name" : "USN-4038-1",
          "refsource" : "UBUNTU",
          "tags" : [ ]
        }, {
          "url" : "https://usn.ubuntu.com/4038-2/",
          "name" : "USN-4038-2",
          "refsource" : "UBUNTU",
          "tags" : [ ]
        } ]
      },
      "description" : {
        "description_data" : [ {
          "lang" : "en",
          "value" : "Use-after-free vulnerability in bzip2recover in bzip2 1.0.6 allows remote attackers to cause a denial of service (crash) via a crafted bzip2 file, related to block ends set to before the start of the block."
        }, {
          "lang" : "en",
          "value" : "<a href=\"http://cwe.mitre.org/data/definitions/416.html\">CWE-416: Use After Free</a>"
        } ]
      }
    },
    "configurations" : {
      "CVE_data_version" : "4.0",
      "nodes" : [ {
        "operator" : "OR",
        "cpe_match" : [ {
          "vulnerable" : true,
          "cpe23Uri" : "cpe:2.3:a:bzip:bzip2:1.0.6:*:*:*:*:*:*:*"
        } ]
      } ]
    },
    "impact" : {
      "baseMetricV3" : {
        "cvssV3" : {
          "version" : "3.0",
          "vectorString" : "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "attackVector" : "NETWORK",
          "attackComplexity" : "LOW",
          "privilegesRequired" : "NONE",
          "userInteraction" : "REQUIRED",
          "scope" : "UNCHANGED",
          "confidentialityImpact" : "NONE",
          "integrityImpact" : "NONE",
          "availabilityImpact" : "HIGH",
          "baseScore" : 6.5,
          "baseSeverity" : "MEDIUM"
        },
        "exploitabilityScore" : 2.8,
        "impactScore" : 3.6
      },
      "baseMetricV2" : {
        "cvssV2" : {
          "version" : "2.0",
          "vectorString" : "AV:N/AC:M/Au:N/C:N/I:N/A:P",
          "accessVector" : "NETWORK",
          "accessComplexity" : "MEDIUM",
          "authentication" : "NONE",
          "confidentialityImpact" : "NONE",
          "integrityImpact" : "NONE",
          "availabilityImpact" : "PARTIAL",
          "baseScore" : 4.3
        },
        "severity" : "MEDIUM",
        "exploitabilityScore" : 8.6,
        "impactScore" : 2.9,
        "obtainAllPrivilege" : false,
        "obtainUserPrivilege" : false,
        "obtainOtherPrivilege" : false,
        "userInteractionRequired" : true
      }
    },
    "publishedDate" : "2016-06-30T17:59Z",
    "lastModifiedDate" : "2017-08-22T01:29Z"
} # End of issue_1389_dict

#
# --------------------------------------------------------------------
# Process the NIST database files into the following format.
#
# Output is: nist_json_cve_list[]
# Each element of nist_json_cve_list contains:
#
#     [0] vendor-product-version split character
#     [1] cve text description   split character
#     [2] cve value
#
# --------------------------------------------------------------------
#
# A single CVE-ID will have N descriptions
#   It will have X nodes
#      Each node will have Y cpe_match values
#
# totalDescriptionCount = 1 # TODO calculate lenght based on data type
# for descriptionIter in range(0, totalDescriptionCount):
   # # TODO get description text from description_data[description_iter]

# issue_dict = issue_0768_dict
# issue_dict = issue_1389_dict

header_printed = False
nist_json_cve_list = []     # NIST provided json cve entries for output
FIELD_SPLIT_CHARACTER = '|'

files = [f for f in listdir("nvd/") if f.endswith('.zip') and isfile(join("nvd/", f))]
files.sort()
nist_json_matched_list = list()

for file in files:
    archive  = zipfile.ZipFile(join("nvd/", file), 'r')
    jsonfile = archive.open(archive.namelist()[0])
    issue_dict = json.loads(jsonfile.read().decode('utf-8'))
    print("Processing file " + file)

    if header_printed == False:
        print("CVE_data_timestamp: "    + str(issue_dict['CVE_data_timestamp']))
        print("CVE_data_version: "      + str(issue_dict['CVE_data_version']))
        print("CVE_data_format: "       + str(issue_dict['CVE_data_format']))
        print(" ")
        header_printed = True

    # Check that the CVE_data_version is 4.0  TODO
    # cvedataversion = str(cve_dict['CVE_data_version'])
    # cvedataversion = '4.0'
    #if ( cvedataversion.find("4.0") == 0 ) :
    #   print("CVE Schema version is unknown, exiting")
    #   exit

    cve_nist_dict = dict()
    nist_json_cve_entry_list = list()
    totalcvecount = int(str(issue_dict['CVE_data_numberOfCVEs']))
    print("totalcvecount is " + str(totalcvecount))

    for nodeIter in range (0, totalcvecount):
        time_52 =  timer()

        # TODO gather any operator such as OR AND
        # TODO gather cpe matches looking at value of versionEndIncluding
        # and cpe23Uri parsed out into the manufacturer:productName
        cveIssueDict    = issue_dict['CVE_Items'][nodeIter]
        
        theDescription = cveIssueDict['cve']['description']['description_data'][0]['value']
        # DEBUG print(theDescription)
        
        cveId           = cveIssueDict['cve']['CVE_data_meta']['ID']
        # DEBUG print ("CVE ID: " + cveId)
        if (len(cveIssueDict['configurations']['nodes']) != 0) :
            if ( 'children' in cveIssueDict['configurations']['nodes'][0].keys() ):
                cve_version     = cveIssueDict['configurations']['nodes'][0]['children'][0]['cpe_match'][0]['cpe23Uri']
            else :
                cve_version     = cveIssueDict['configurations']['nodes'][0]['cpe_match'][0]['cpe23Uri']

        # DEBUG print("cpe 2.3 URI: " + issue_dict['CVE_Items'][cpeMatchIter]['configurations']['nodes'][nodeIter]['cpe_match'][cpeMatchIter]['cpe23Uri'])
        split_cpe23uri = cve_version.split(':')
        nist_json_cve_entry = split_cpe23uri[3] + "-" + split_cpe23uri[4] + "-" + split_cpe23uri[5]
        # DEBUG print(split_cpe23uri[3] + "-" + split_cpe23uri[4] + "-" + split_cpe23uri[5])
        
        # TODO manage the special end and start range values
        #if ( 'versionEndIncluding' in issue_dict['CVE_Items'][cpeMatchIter]['configurations']['nodes'][0]['cpe_match'][0].keys() ) :
        #    maxversion = issue_dict['CVE_Items'][cpeMatchIter]['configurations']['nodes'][0]['cpe_match'][0]['versionEndIncluding']
            #print("End version = " + maxversion)

        #if ( 'versionStartIncluding' in issue_dict['CVE_Items'][cpeMatchIter]['configurations']['nodes'][0]['cpe_match'][0].keys() ) :
        #    maxversion = issue_dict['CVE_Items'][cpeMatchIter]['configurations']['nodes'][0]['cpe_match'][0]['versionStartIncluding']
            #print("Start version = " + maxversion)
            
        cve_nist_dict[nodeIter] = {\
            "current_cve_id"          : cveId,\
            "nist_json_cve_entry"     : nist_json_cve_entry,\
            "current_cve_description" : theDescription\
        }
            
    # End for nodeIter

    #time_97 =  datetime.time()
    #timedelta = time_97 - time_52
    #print("97-52 took this amount of time " + str(timedelta.seconds))
    # DEBUG print(cve_nist_dict[0]['current_cve_id'] + " " + cve_nist_dict[0]['nist_json_cve_entry'] + " " + cve_nist_dict[0]['current_cve_description'])
    # DEBUGlastcveindex = len(cve_nist_dict)-1
    # DEBUG print(cve_nist_dict[lastcveindex]['current_cve_id'] + " " + cve_nist_dict[lastcveindex]['nist_json_cve_entry'] + " " + cve_nist_dict[lastcveindex]['current_cve_description'])
# End of this NVD file

time_97 =  timer()
print(time_97 - time_52)
